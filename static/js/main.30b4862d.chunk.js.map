{"version":3,"sources":["components/Footer/Footer.js","components/Header/Header.js","components/common/Context.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","api/api.js","App.js","index.js"],"names":["Footer","todos","clearCompleted","length","className","filter","todo","isCompleted","exact","to","activeClassName","type","onClick","Header","addTodo","useForm","register","setValue","handleSubmit","onSubmit","data","newTodo","name","ref","required","placeholder","Context","createContext","TodoItem","id","title","useState","isEditing","setIsEditing","useContext","setTodoCompleted","removeTodo","editTitle","currentClass","document","addEventListener","setInput","event","target","dataset","area","removeEventListener","onChange","checked","changedTitle","input","focus","defaultValue","data-area","onKeyUp","key","onDoubleClick","TodoListWithRouter","withRouter","props","location","todosToShow","pathname","map","instance","axios","baseURL","todoApi","get","response","Object","entries","post","then","delete","value","put","JSON","stringify","App","setTodos","useEffect","prev","htmlFor","Provider","forEach","ReactDOM","render","getElementById"],"mappings":"6RAIaA,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,eAC9B,OAAKD,EAAME,OAKT,4BAAQC,UAAU,UAChB,0BAAMA,UAAU,cACbH,EAAMI,QAAO,SAAAC,GAAI,OAAKA,EAAKC,eAAaJ,OAD3C,kBAKA,wBAAIC,UAAU,WACZ,4BACE,kBAAC,IAAD,CAASI,OAAK,EAACC,GAAG,IAAIC,gBAAgB,YAAtC,QAGF,4BACE,kBAAC,IAAD,CAASD,GAAG,UAAUC,gBAAgB,YAAtC,WAGF,4BACE,kBAAC,IAAD,CAASD,GAAG,aAAaC,gBAAgB,YAAzC,eAMJ,4BACEC,KAAK,SACLP,UAAU,kBACVQ,QAASV,GAHX,oBA1BK,sC,QCFEW,EAAS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACQC,cAArCC,EAD6B,EAC7BA,SAAUC,EADmB,EACnBA,SAAUC,EADS,EACTA,aAO5B,OACE,4BAAQd,UAAU,UAChB,qCAEA,0BAAMe,SAAUD,GATH,SAACE,GAChBN,EAAQM,EAAKC,SACbJ,EAAS,UAAW,QAQhB,2BACEK,KAAK,UACLC,IAAKP,EAAS,CAAEQ,UAAU,IAC1BpB,UAAU,WACVqB,YAAY,8B,OCnBTC,EAAUC,0BCGVC,EAAW,SAAC,GAAgC,IAA9BrB,EAA6B,EAA7BA,YAAasB,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAAY,EACpBC,oBAAS,GADW,mBAC/CC,EAD+C,KACpCC,EADoC,OAEFC,qBAAWR,GAAvDS,EAF8C,EAE9CA,iBAAkBC,EAF4B,EAE5BA,WAAYC,EAFgB,EAEhBA,UAFgB,EAGnBtB,cAA3BC,EAH8C,EAG9CA,SAAUE,EAHoC,EAGpCA,aAUdoB,EAAe/B,EAAc,YAAc,GAE3CyB,IACFM,EAAe,WAWjBC,SAASC,iBAAiB,SAAS,SAASC,EAASC,GACjB,cAA9BA,EAAMC,OAAOC,QAAQC,MAAwBb,GAC/CC,GAAa,GAGfM,SAASO,oBAAoB,QAASL,MASxC,OACE,wBAAIrC,UAAWkC,GACb,6BACE,2BACE3B,KAAK,WACLP,UAAU,SACVyB,GAAIA,EACJkB,SA3Ca,SAACL,GACpBP,EAAiBN,EAAIa,EAAMC,OAAOK,UA2C5BA,QAASzC,IAGTyB,EAEI,0BAAMb,SAAUD,GAnCX,SAACE,GACZA,EAAK6B,cACPZ,EAAUR,EAAIT,EAAK6B,cAGrBhB,GAAa,OA+BD,2BACEX,KAAK,eACLC,IAAK,SAAC2B,GACJA,GAASA,EAAMC,QACfnC,IAAWkC,IAEbE,aAActB,EACdnB,KAAK,OACLP,UAAU,OACViD,YAAU,YACVC,QA9BA,SAACZ,GACG,WAAdA,EAAMa,KACRtB,GAAa,OAiCL,oCACE,0BACE7B,UAAU,QACVoD,cAAe,kBAAMvB,GAAa,KAEjCH,GAEH,4BACEnB,KAAK,SACLP,UAAU,UACVQ,QAvEA,WACdwB,EAAWP,UC0BF4B,EAAqBC,aApCjB,SAACC,GAAW,IACnB1D,EAAoB0D,EAApB1D,MAAO2D,EAAaD,EAAbC,SAEXC,EAAc5D,EAUlB,MAR0B,eAAtB2D,EAASE,WACXD,EAAc5D,EAAMI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,gBAGhB,YAAtBqD,EAASE,WACXD,EAAc5D,EAAMI,QAAO,SAAAC,GAAI,OAAKA,EAAKC,gBAIzC,wBAAIH,UAAU,aAEVyD,EAAYE,KAAI,SAAAzD,GAAI,OAClB,kBAAC,EAAD,CACEiD,IAAKjD,EAAKuB,GACVA,GAAIvB,EAAKuB,GACTtB,YAAaD,EAAKC,YAClBuB,MAAOxB,EAAKwB,e,wBCxBlBkC,E,MAAWC,OAAa,CAC5BC,QAAS,uCAGEC,EAAU,WACJ,OAAD,4HACSH,EAASI,IAAI,eADtB,WACRC,EADQ,QAGAjD,KAHA,yCAIL,IAJK,cAORnB,EAAQqE,OAAOC,QAAQF,EAASjD,MACnC2C,KAAI,SAAAzD,GAAI,kCACJA,EAAK,IADD,IAEPuB,GAAIvB,EAAK,QAVC,kBAaPL,GAbO,8CADLkE,EAAU,SAgBhB7D,GACH,OAAO0D,EACJQ,KAAK,cAAelE,GACpBmE,MAAK,SAAAJ,GAAQ,OAAIA,EAASjD,KAAKE,SAnBzB6C,EAAU,SAqBVtC,GACT,OAAOmC,EAASU,OAAT,gBAAyB7C,EAAzB,WAtBEsC,EAAU,SAwBZtC,EAAIP,EAAMqD,GACjB,OAAOX,EAASY,IAAT,gBAAsB/C,EAAtB,YAA4BP,EAA5B,SAAyCuD,KAAKC,UAAUH,KCoEpDI,MA3Ff,WAAgB,IAAD,EACahD,mBAAS,IADtB,mBACN9B,EADM,KACC+E,EADD,KAGbC,qBAAU,WACRd,IAAkBM,KAAKO,KACtB,IAEH,IA8BM5C,EAAa,SAACP,GAClBmD,GAAS,SAAAE,GAAI,OAAIA,EAAK7E,QAAO,SAAAC,GAAI,OAAIA,EAAKuB,KAAOA,QAEjDsC,EAAmBtC,IA0BrB,OACE,6BAASzB,UAAU,WACjB,kBAAC,EAAD,CAAQU,QA7DI,SAACgB,GACf,IAAMxB,EAAO,CACXwB,QACAvB,aAAa,GAGf4D,EAAa7D,GAAMmE,MAAK,SAAA5C,GAAE,OAAImD,GAAS,SAAAE,GAAI,4BACtCA,GADsC,4BAGpC5E,GAHoC,IAIvCuB,kBAqDF,kBAAC,IAAD,KACE,6BAASzB,UAAU,QACjB,2BAAOO,KAAK,WAAWkB,GAAG,aAAazB,UAAU,eACjD,2BAAO+E,QAAQ,cAAf,wBAEA,kBAACzD,EAAQ0D,SAAT,CAAkBT,MAAO,CACvBxC,iBAtDe,SAACN,EAAItB,GAC5ByE,GAAS,SAAAE,GAAI,OAAIA,EAAKnB,KAAI,SAACzD,GACzB,OAAIA,EAAKuB,KAAOA,EACP,2BACFvB,GADL,IAEEC,gBAIGD,QAGT6D,EAAiBtC,EAAI,cAAetB,IA2C5B6B,aACAC,UA3BQ,SAACR,EAAIC,GACrBkD,GAAS,SAAAE,GAAI,OAAIA,EAAKnB,KAAI,SAACzD,GACzB,OAAIA,EAAKuB,KAAOA,EACP,2BACFvB,GADL,IAEEwB,UAIGxB,QAGT6D,EAAiBtC,EAAI,QAASC,MAkBtB,kBAAC2B,EAAD,CAAoBxD,MAAOA,MAI/B,kBAAC,EAAD,CAAQA,MAAOA,EAAOC,eA1CL,WACrBD,EAAMoF,SAAQ,SAAC/E,GACTA,EAAKC,aACP6B,EAAW9B,EAAKuB,aChDxByD,IAASC,OACP,kBAAC,EAAD,MACAhD,SAASiD,eAAe,W","file":"static/js/main.30b4862d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nexport const Footer = ({ todos, clearCompleted }) => {\n  if (!todos.length) {\n    return <></>;\n  }\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {todos.filter(todo => !todo.isCompleted).length}\n        &nbsp;items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <NavLink exact to=\"/\" activeClassName=\"selected\">All</NavLink>\n        </li>\n\n        <li>\n          <NavLink to=\"/active\" activeClassName=\"selected\">Active</NavLink>\n        </li>\n\n        <li>\n          <NavLink to=\"/completed\" activeClassName=\"selected\">\n            Completed\n          </NavLink>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\n\nexport const Header = ({ addTodo }) => {\n  const { register, setValue, handleSubmit } = useForm();\n\n  const onSubmit = (data) => {\n    addTodo(data.newTodo);\n    setValue('newTodo', '');\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          name=\"newTodo\"\n          ref={register({ required: true })}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import { createContext } from 'react';\n\nexport const Context = createContext();\n","import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { Context } from '../common/Context';\n\nexport const TodoItem = ({ isCompleted, id, title }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const { setTodoCompleted, removeTodo, editTitle } = useContext(Context);\n  const { register, handleSubmit } = useForm();\n\n  const handleChange = (event) => {\n    setTodoCompleted(id, event.target.checked);\n  };\n\n  const destroy = () => {\n    removeTodo(id);\n  };\n\n  let currentClass = isCompleted ? 'completed' : '';\n\n  if (isEditing) {\n    currentClass = 'editing';\n  }\n\n  const onSubmit = (data) => {\n    if (data.changedTitle) {\n      editTitle(id, data.changedTitle);\n    }\n\n    setIsEditing(false);\n  };\n\n  document.addEventListener('click', function setInput(event) {\n    if (event.target.dataset.area !== 'editTitle' && isEditing) {\n      setIsEditing(false);\n    }\n\n    document.removeEventListener('click', setInput);\n  });\n\n  const onKeyUp = (event) => {\n    if (event.key === 'Escape') {\n      setIsEditing(false);\n    }\n  };\n\n  return (\n    <li className={currentClass}>\n      <div>\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          onChange={handleChange}\n          checked={isCompleted}\n        />\n        {\n          isEditing\n            ? (\n              <form onSubmit={handleSubmit(onSubmit)}>\n                <input\n                  name=\"changedTitle\"\n                  ref={(input) => {\n                    input && input.focus();\n                    register()(input);\n                  }}\n                  defaultValue={title}\n                  type=\"text\"\n                  className=\"edit\"\n                  data-area=\"editTitle\"\n                  onKeyUp={onKeyUp}\n                />\n              </form>\n            )\n            : (\n              <>\n                <span\n                  className=\"title\"\n                  onDoubleClick={() => setIsEditing(true)}\n                >\n                  {title}\n                </span>\n                <button\n                  type=\"button\"\n                  className=\"destroy\"\n                  onClick={destroy}\n                />\n              </>\n            )\n        }\n      </div>\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  isCompleted: PropTypes.bool.isRequired,\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { TodoItem } from '../TodoItem';\n\nconst TodoList = (props) => {\n  const { todos, location } = props;\n\n  let todosToShow = todos;\n\n  if (location.pathname === '/completed') {\n    todosToShow = todos.filter(todo => todo.isCompleted);\n  }\n\n  if (location.pathname === '/active') {\n    todosToShow = todos.filter(todo => !todo.isCompleted);\n  }\n\n  return (\n    <ul className=\"todo-list\">\n      {\n        todosToShow.map(todo => (\n          <TodoItem\n            key={todo.id}\n            id={todo.id}\n            isCompleted={todo.isCompleted}\n            title={todo.title}\n          />\n        ))\n      }\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const TodoListWithRouter = withRouter(TodoList);\n","import * as axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://todo-96cb8.firebaseio.com/',\n});\n\nexport const todoApi = {\n  async request() {\n    const response = await instance.get('/todos.json');\n\n    if (!response.data) {\n      return [];\n    }\n\n    const todos = Object.entries(response.data)\n      .map(todo => ({\n        ...todo[1],\n        id: todo[0],\n      }));\n\n    return todos;\n  },\n  send(todo) {\n    return instance\n      .post('/todos.json', todo)\n      .then(response => response.data.name);\n  },\n  removeItem(id) {\n    return instance.delete(`todos/${id}.json`);\n  },\n  editItem(id, name, value) {\n    return instance.put(`todos/${id}/${name}.json`, JSON.stringify(value));\n  },\n};\n","import React, { useState, useEffect } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Footer } from './components/Footer';\nimport { Header } from './components/Header';\nimport { TodoListWithRouter } from './components/TodoList';\nimport { todoApi } from './api/api';\nimport { Context } from './components/common/Context';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    todoApi.request().then(setTodos);\n  }, []);\n\n  const addTodo = (title) => {\n    const todo = {\n      title,\n      isCompleted: false,\n    };\n\n    todoApi.send(todo).then(id => setTodos(prev => [\n      ...prev,\n      {\n        ...todo,\n        id,\n      },\n    ]));\n  };\n\n  const setTodoCompleted = (id, isCompleted) => {\n    setTodos(prev => prev.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          isCompleted,\n        };\n      }\n\n      return todo;\n    }));\n\n    todoApi.editItem(id, 'isCompleted', isCompleted);\n  };\n\n  const removeTodo = (id) => {\n    setTodos(prev => prev.filter(todo => todo.id !== id));\n\n    todoApi.removeItem(id);\n  };\n\n  const clearCompleted = () => {\n    todos.forEach((todo) => {\n      if (todo.isCompleted) {\n        removeTodo(todo.id);\n      }\n    });\n  };\n\n  const editTitle = (id, title) => {\n    setTodos(prev => prev.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          title,\n        };\n      }\n\n      return todo;\n    }));\n\n    todoApi.editItem(id, 'title', title);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <Header addTodo={addTodo} />\n\n      <HashRouter>\n        <section className=\"main\">\n          <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <Context.Provider value={{\n            setTodoCompleted,\n            removeTodo,\n            editTitle,\n          }}\n          >\n            <TodoListWithRouter todos={todos} />\n          </Context.Provider>\n        </section>\n\n        <Footer todos={todos} clearCompleted={clearCompleted} />\n      </HashRouter>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}