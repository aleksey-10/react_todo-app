{"version":3,"sources":["components/Footer/Footer.js","components/Header/Header.js","components/common/Context.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","api/api.js","App.js","index.js"],"names":["Footer","todos","clearCompleted","className","filter","todo","isCompleted","length","exact","to","activeClassName","type","onClick","Header","addTodo","useForm","register","setValue","handleSubmit","onSubmit","data","newTodo","name","ref","required","placeholder","Context","createContext","TodoItem","id","title","useContext","setTodoCompleted","removeTodo","onChange","event","target","checked","htmlFor","TodoListWithRouter","withRouter","props","location","todosToShow","pathname","map","key","instance","axios","baseURL","todoApi","get","response","Object","entries","post","then","value","put","delete","App","useState","setTodos","useEffect","prev","Provider","forEach","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf40b1dc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nexport const Footer = ({ todos, clearCompleted }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {todos.filter(todo => !todo.isCompleted).length}\n      &nbsp;items left\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <NavLink exact to=\"/\" activeClassName=\"selected\">All</NavLink>\n      </li>\n\n      <li>\n        <NavLink to=\"/active\" activeClassName=\"selected\">Active</NavLink>\n      </li>\n\n      <li>\n        <NavLink to=\"/completed\" activeClassName=\"selected\">Completed</NavLink>\n      </li>\n    </ul>\n\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={clearCompleted}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\n\nexport const Header = ({ addTodo }) => {\n  const { register, setValue, handleSubmit } = useForm();\n\n  const onSubmit = (data) => {\n    addTodo(data.newTodo);\n    setValue('newTodo', '');\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          name=\"newTodo\"\n          ref={register({ required: true })}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import { createContext } from 'react';\n\nexport const Context = createContext();\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Context } from '../common/Context';\n\nexport const TodoItem = ({ isCompleted, id, title }) => {\n  const { setTodoCompleted, removeTodo } = useContext(Context);\n\n  const handleChange = (event) => {\n    setTodoCompleted(id, event.target.checked);\n  };\n\n  const destroy = () => {\n    removeTodo(id);\n  };\n\n  return (\n    <li className={isCompleted ? 'completed' : ''}>\n      <div>\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          onChange={handleChange}\n          checked={isCompleted}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={destroy}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  isCompleted: PropTypes.bool.isRequired,\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { TodoItem } from '../TodoItem';\n\nconst TodoList = (props) => {\n  const { todos, location } = props;\n\n  let todosToShow = todos;\n\n  if (location.pathname === '/completed') {\n    todosToShow = todos.filter(todo => todo.isCompleted);\n  }\n\n  if (location.pathname === '/active') {\n    todosToShow = todos.filter(todo => !todo.isCompleted);\n  }\n\n  return (\n    <ul className=\"todo-list\">\n      {\n        todosToShow.map(todo => (\n          <TodoItem\n            key={todo.id}\n            id={todo.id}\n            isCompleted={todo.isCompleted}\n            title={todo.title}\n          />\n        ))\n      }\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const TodoListWithRouter = withRouter(TodoList);\n","import * as axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://todo-96cb8.firebaseio.com/',\n});\n\nexport const todoApi = {\n  async request() {\n    const response = await instance.get('/todos.json');\n\n    if (!response.data) {\n      return [];\n    }\n\n    const todos = Object.entries(response.data)\n      .map(todo => ({\n        ...todo[1],\n        id: todo[0],\n      }));\n\n    return todos;\n  },\n  send(todo) {\n    return instance\n      .post('/todos.json', todo)\n      .then(response => response.data.name);\n  },\n  setCompleted(id, value) {\n    return instance.put(`todos/${id}/isCompleted.json`, value);\n  },\n  removeItem(id) {\n    return instance.delete(`todos/${id}.json`);\n  },\n};\n","import React, { useState, useEffect } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Footer } from './components/Footer';\nimport { Header } from './components/Header';\nimport { TodoListWithRouter } from './components/TodoList';\nimport { todoApi } from './api/api';\nimport { Context } from './components/common/Context';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    todoApi.request().then(setTodos);\n  }, []);\n\n  const addTodo = (title) => {\n    const todo = {\n      title,\n      isCompleted: false,\n    };\n\n    todoApi.send(todo).then(id => setTodos(prev => [\n      ...prev,\n      {\n        ...todo,\n        id,\n      },\n    ]));\n  };\n\n  const setTodoCompleted = (id, isCompleted) => {\n    setTodos(prev => prev.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          isCompleted,\n        };\n      }\n\n      return todo;\n    }));\n\n    todoApi.setCompleted(id, isCompleted);\n  };\n\n  const removeTodo = (id) => {\n    setTodos(prev => prev.filter(todo => todo.id !== id));\n\n    todoApi.removeItem(id);\n  };\n\n  const clearCompleted = () => {\n    todos.forEach((todo) => {\n      if (todo.isCompleted) {\n        removeTodo(todo.id);\n      }\n    });\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <Header addTodo={addTodo} />\n\n      <HashRouter>\n        <section className=\"main\">\n          <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <Context.Provider value={{\n            setTodoCompleted,\n            removeTodo,\n          }}\n          >\n            <TodoListWithRouter todos={todos} />\n          </Context.Provider>\n        </section>\n\n        <Footer todos={todos} clearCompleted={clearCompleted} />\n      </HashRouter>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}